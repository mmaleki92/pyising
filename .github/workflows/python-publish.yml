name: Upload Python Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel build scikit-build ninja twine cibuildwheel

    - name: Clean old builds
      run: rm -rf dist build *.egg-info _skbuild

    - name: Build package with cibuildwheel
      run: |
        # Build only manylinux wheels for selected Python versions
        export CIBW_BUILD="cp38-manylinux* cp39-manylinux* cp310-manylinux* cp311-manylinux* cp312-manylinux*"
        # Skip all other platforms explicitly
        export CIBW_SKIP="*-musllinux* *-win* *-macos*"
        # Install MPI and build tools for manylinux
        export CIBW_BEFORE_BUILD="yum install -y openmpi-devel && pip install ninja"
        # Set MPI paths for CMake
        export CIBW_ENVIRONMENT="CMAKE_ARGS='-DMPI_HOME=/usr/lib64/openmpi -DMPI_C_LIBRARIES=/usr/lib64/openmpi/lib/libmpi.so -DMPI_CXX_LIBRARIES=/usr/lib64/openmpi/lib/libmpi_cxx.so -DMPI_C_INCLUDE_PATH=/usr/include/openmpi-x86_64 -DMPI_CXX_INCLUDE_PATH=/usr/include/openmpi-x86_64'"
        # Run the build
        python -m cibuildwheel --output-dir dist

    - name: Check distribution
      run: twine check dist/*

    - name: Publish Package
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}